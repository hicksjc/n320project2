{"version":3,"sources":["Person/TypeButton.js","Person/BehaviorButton.js","Person/InspDialogue.js","Person/PersonQuote.js","App.js","reportWebVitals.js","index.js"],"names":["PersonalityTypes","Manipulative","Directive","Mean","Optimistic","Pessimistic","onSecondClicked","id","onClick","PersonalityBehaviors","Inspirational","GoalOriented","onThirdClicked","console","log","InspDialogue","InspManip","InspDirect","InspMean","InspOpt","InspPess","PersonQuote","useState","setPersonalities","PersonalityType","setPersonalityType","Behaviors","setBehaviors","showSecondTypes","setShowSecondTypes","InspirationalDialogue","setShowInspDialogue","setSelectedPersonType","setShowThirdTypes","useEffect","fetch","then","response","json","data","Personalities","PType","PDialogue","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83c47dff.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function PersonalityTypes({\r\n  Manipulative,\r\n  Directive,\r\n  Mean,\r\n  Optimistic,\r\n  Pessimistic,\r\n  onSecondClicked\r\n}) {\r\n  return (\r\n    <div>\r\n      <button\r\n        id=\"Manipulative\"\r\n        onClick={() => {\r\n          onSecondClicked(0);\r\n        }}\r\n      >\r\n        {Manipulative}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          onSecondClicked(1);\r\n        }}\r\n      >\r\n        {Directive}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          onSecondClicked(2);\r\n        }}\r\n      >\r\n        {Mean}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          onSecondClicked(3);\r\n        }}\r\n      >\r\n        {Optimistic}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          onSecondClicked(4);\r\n        }}\r\n      >\r\n        {Pessimistic}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PersonalityTypes from \"./TypeButton\";\r\n\r\nexport default function PersonalityBehaviors({\r\n  Inspirational,\r\n  GoalOriented,\r\n  onThirdClicked\r\n}) {\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          onThirdClicked(0);\r\n        }}\r\n      >\r\n        {Inspirational}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          console.log(\"I've been clicked\", { GoalOriented });\r\n          onThirdClicked(1);\r\n        }}\r\n      >\r\n        {GoalOriented}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function InspDialogue({\r\n  InspManip,\r\n  InspDirect,\r\n  InspMean,\r\n  InspOpt,\r\n  InspPess\r\n}) {\r\n  return (\r\n    <div>\r\n      <h2 id=\"InspManip\">{InspManip}</h2>\r\n      <h2 id=\"InspDirect\">{InspDirect}</h2>\r\n      <h2 id=\"InspMean\">{InspMean}</h2>\r\n      <h2 id=\"InspOpt\">{InspOpt}</h2>\r\n      <h2 id=\"InspPess\">{InspPess}</h2>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n//import PersonalityList from \"./PersonalityList\";\r\nimport PersonalityBehaviors from \"./BehaviorButton\";\r\nimport PersonalityTypes from \"./TypeButton.js\";\r\nimport InspDialogue from \"./InspDialogue.js\";\r\n\r\nexport default function PersonQuote() {\r\n  const [Personalities, setPersonalities] = useState([]);\r\n  const [PersonalityType, setPersonalityType] = useState([]);\r\n  const [Behaviors, setBehaviors] = useState([]);\r\n  const [showSecondTypes, setShowSecondTypes] = useState(false);\r\n  const [InspirationalDialogue, setShowInspDialogue] = useState([]);\r\n  //const [currentText, setCurText] = useState(\"\");\r\n  const [selectedPersonalityType, setSelectedPersonType] = useState(\"\");\r\n  const [showThirdTypes, setShowThirdTypes] = useState(false);\r\n  //const [showDialogue, setShowDialogue] = useState(false);\r\n  useEffect(() => {\r\n    fetch(\"data/data.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //set the data\r\n        setPersonalities(data);\r\n        setPersonalityType(data.Personalities[0].PersonalityType);\r\n        //console.log(data.Personalities[0].PersonalityBehaviors);\r\n        setBehaviors(data.Personalities[0].PersonalityBehaviors);\r\n        // setShowDialogue should retrieve user input based on the two\r\n        // Buttons clicked. It should know that Manipulation was clicked first\r\n        // And Inspirational was clicked second and display the dialogue according to that data.\r\n        //setShowDialogue(data.Peronslities[0].InspirationalDialogue);\r\n        setShowInspDialogue(data.Personalities[0].InspirationalDialogue);\r\n      });\r\n  }, []);\r\n\r\n  //let personalityBehaviors =\r\n\r\n  // const PB = Behaviors.map((Per, key) => {\r\n\r\n  //  console.log(Per);\r\n  //  });\r\n  return (\r\n    <div>\r\n      <PersonalityTypes\r\n        Manipulative={PersonalityType[0]}\r\n        Directive={PersonalityType[1]}\r\n        Mean={PersonalityType[2]}\r\n        Optimistic={PersonalityType[3]}\r\n        Pessimistic={PersonalityType[4]}\r\n        onSecondClicked={(PType) => {\r\n          console.log(PType);\r\n          setSelectedPersonType(PType);\r\n          showSecondClicked();\r\n        }}\r\n      />\r\n      {showSecondTypes && (\r\n        <PersonalityBehaviors\r\n          Inspirational={Behaviors[0]}\r\n          GoalOriented={Behaviors[1]}\r\n          onThirdClicked={(PDialogue) => {\r\n            console.log(PDialogue);\r\n            setShowThirdTypes(PDialogue);\r\n            showInspirationalDialogue();\r\n          }}\r\n        />\r\n      )}\r\n      {InspDialogue && (\r\n        <InspDialogue\r\n          InspManip={InspirationalDialogue[0]}\r\n          InspDirect={InspirationalDialogue[1]}\r\n          InspMean={InspirationalDialogue[2]}\r\n          InspOpt={InspirationalDialogue[3]}\r\n          InspPess={InspirationalDialogue[4]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  function showSecondClicked() {\r\n    setShowSecondTypes(true);\r\n  }\r\n  function showInspirationalDialogue() {\r\n    setShowThirdTypes(true);\r\n  }\r\n}\r\n","import './App.css';\nimport PersonQuote from './Person/PersonQuote';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PersonQuote/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}